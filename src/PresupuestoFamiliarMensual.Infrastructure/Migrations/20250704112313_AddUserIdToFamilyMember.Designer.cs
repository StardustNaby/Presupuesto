// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PresupuestoFamiliarMensual.Infrastructure.Data;

#nullable disable

namespace PresupuestoFamiliarMensual.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250704112313_AddUserIdToFamilyMember")]
    partial class AddUserIdToFamilyMember
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.17");

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("FamilyMemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MonthId");

                    b.HasIndex("FamilyMemberId", "MonthId")
                        .IsUnique();

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.BudgetCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BudgetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Limit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId", "Name")
                        .IsUnique();

                    b.ToTable("BudgetCategories");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BudgetCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BudgetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("FamilyMemberId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BudgetCategoryId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("FamilyMemberId");

                    b.HasIndex("MonthId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.FamilyMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("FamilyMembers");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.Month", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MonthNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MonthNumber", "Year")
                        .IsUnique();

                    b.ToTable("Months");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.Budget", b =>
                {
                    b.HasOne("PresupuestoFamiliarMensual.Core.Entities.FamilyMember", "FamilyMember")
                        .WithMany()
                        .HasForeignKey("FamilyMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PresupuestoFamiliarMensual.Core.Entities.Month", "Month")
                        .WithMany("Budgets")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FamilyMember");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.BudgetCategory", b =>
                {
                    b.HasOne("PresupuestoFamiliarMensual.Core.Entities.Budget", "Budget")
                        .WithMany("Categories")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.Expense", b =>
                {
                    b.HasOne("PresupuestoFamiliarMensual.Core.Entities.BudgetCategory", "BudgetCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("BudgetCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PresupuestoFamiliarMensual.Core.Entities.Budget", null)
                        .WithMany("Expenses")
                        .HasForeignKey("BudgetId");

                    b.HasOne("PresupuestoFamiliarMensual.Core.Entities.FamilyMember", "FamilyMember")
                        .WithMany("Expenses")
                        .HasForeignKey("FamilyMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PresupuestoFamiliarMensual.Core.Entities.Month", "Month")
                        .WithMany("Expenses")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BudgetCategory");

                    b.Navigation("FamilyMember");

                    b.Navigation("Month");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.FamilyMember", b =>
                {
                    b.HasOne("PresupuestoFamiliarMensual.Core.Entities.User", "User")
                        .WithMany("FamilyMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.Budget", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.BudgetCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.FamilyMember", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.Month", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("PresupuestoFamiliarMensual.Core.Entities.User", b =>
                {
                    b.Navigation("FamilyMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
